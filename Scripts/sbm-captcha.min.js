(function (a) {
    a.fn.extend({
        iconCaptcha: function (b) {
            var d = a.extend({
                captchaTheme: [''],
                captchaFontFamily: '',
                captchaClickDelay: 1e3,
                captchaHoverDetection: !0,
                showCredits: 'show',
                enableLoadingAnimation: !1,
                loadingAnimationDelay: 2e3,
                requestIconsDelay: 1500,
                captchaAjaxFile: '../php/captcha-request.php',
                captchaMessages: {
                    header: 'Select the image that does not belong in the row',
                    correct: {
                        top: 'Great!',
                        bottom: 'You do not appear to be a robot.'
                    },
                    incorrect: {
                        top: 'Oops!',
                        bottom: 'You\'ve selected the wrong image.'
                    }
                }
            }, b);
            return this.each(function (f) {
                function g(x) {
                    var y = 'light';
                    d.captchaTheme[s] !== void 0 && ('dark' === d.captchaTheme[s] || 'light' === d.captchaTheme[s]) && (y = d.captchaTheme[s].toLowerCase()), w = 0, r.addClass('captcha-theme-' + y), v || j();
                    var z = r.find('.captcha-modal__icons');
                    d.requestIconsDelay && 0 < d.requestIconsDelay && !v ? (!x && p(z), setTimeout(function () {
                        h(y, z, !0)
                    }, d.requestIconsDelay)) : h(y, z, x)
                }

                function h(x, y, z) {
                    a.ajax({
                        url: d.captchaAjaxFile,
                        type: 'post',
                        dataType: 'json',
                        data: {
                            cID: s,
                            rT: 1,
                            tM: x
                        },
                        success: function (A) {
                            A && 'object' == typeof A && (!z && p(y), t = new Date, r.find('.captcha-image').each(function (B) {
                                a(this).css('background-image', 'url(' + d.captchaAjaxFile + '?cid=' + s + '&hash=' + A[B] + ')'), a(this).attr('icon-hash', A[B]), o(a(this), y)
                            }), !v && r.trigger('init', [{
                                captcha_id: f
                            }]), v = !0)
                        },
                        error: function () {
                            m()
                        }
                    })
                }

                function j() {
                    d.captchaFontFamily ? r.css('font-family', d.captchaFontFamily) : a('body').append('<!-- Icon Captcha default font --><link href="https://fonts.googleapis.com/css?family=Roboto:400,500" rel="stylesheet">');
                    var x = ['<div class=\'captcha-modal\'>', '<div class=\'captcha-modal__header\'>', '<span>' + (d.captchaMessages.header && d.captchaMessages.header ? d.captchaMessages.header : 'Select the image that does not belong in the row') + '</span>', '</div>', '<div class=\'captcha-modal__icons\'>', '<div class=\'captcha-image\'></div>', '<div class=\'captcha-image\'></div>', '<div class=\'captcha-image\'></div>', '<div class=\'captcha-image\'></div>', '<div class=\'captcha-image\'></div>', '</div>'];
                    if ('show' === d.showCredits || 'hide' === d.showCredits) {
                        var y = 'captcha-modal__credits' + ('hide' === d.showCredits ? ' captcha-modal__credits--hide' : '');
                        x.push('<div class=\'' + y + '\' title=\'SBM Captcha by PT Shimano Batam\'>', '<a href=\'#\' target=\'_blank\' rel=\'follow\'>SBM Captcha</a> &copy;', '</div>')
                    }
                    x.push('<input type=\'hidden\' name=\'captcha-hf\' required />', '<input type=\'hidden\' name=\'captcha-idhf\' value=\'' + s + '\' required />', '</div>'), r.html(x.join('')).attr('data-captcha-id', s)
                }

                function k(x) {
                    var y = x.attr('icon-hash');
                    y && (r.find('input[name="captcha-hf"]').attr('value', y), r.find('input[name="captcha-idhf"]').attr('value', s), a.ajax({
                        url: d.captchaAjaxFile,
                        type: 'post',
                        data: {
                            cID: s,
                            pC: y,
                            rT: 2
                        },
                        success: function () {
                            l()
                        },
                        error: function () {
                            m()
                        }
                    }))
                }

                function l() {
                    r.find('.captcha-modal__icons').empty(), r.addClass('captcha-success'), r.find('.captcha-modal__icons').html('<div class="captcha-modal__icons-title">' + (d.captchaMessages.correct && d.captchaMessages.correct.top ? d.captchaMessages.correct.top : 'Great!') + '</div><div class="captcha-modal__icons-subtitle">' + (d.captchaMessages.correct && d.captchaMessages.correct.bottom ? d.captchaMessages.correct.bottom : 'You do not appear to be a robot.') + '</div>'), r.trigger('success', [{
                        captcha_id: s
                    }])
                }

                function m() {
                    r.find('.captcha-modal__icons').empty(), r.addClass('captcha-error'), r.find('.captcha-modal__icons').html('<div class="captcha-modal__icons-title">' + (d.captchaMessages.incorrect && d.captchaMessages.incorrect.top ? d.captchaMessages.incorrect.top : 'Oops!') + '</div><div class="captcha-modal__icons-subtitle">' + (d.captchaMessages.incorrect && d.captchaMessages.incorrect.bottom ? d.captchaMessages.incorrect.bottom : 'You\'ve selected the wrong image.') + '</div>'), r.trigger('error', [{
                        captcha_id: s
                    }]), setTimeout(n, 3e3)
                }

                function n() {
                    r.removeClass('captcha-error'), r.find('input[name=\'captcha-hf\']').attr('value', null), r.find('.captcha-modal__icons').html(['<div class=\'captcha-loader\'></div>', '<div class=\'captcha-image\'></div>', '<div class=\'captcha-image\'></div>', '<div class=\'captcha-image\'></div>', '<div class=\'captcha-image\'></div>', '<div class=\'captcha-image\'></div>'].join('\n')), r.find('.captcha-modal__icons > .captcha-image').attr('icon-hash', null), g(!0), r.trigger('refreshed', [{
                        captcha_id: s
                    }])
                }

                function o(x, y) {
                    var z = x.css('background-image').match(/\((.*?)\)/)[1].replace(/('|")/g, ''),
                        A = new Image;
                    A.onload = function () {
                        w += 1, 5 == w && y && q(y)
                    }, A.src = z, A.complete && A.onload()
                }

                function p(x) {
                    x.addClass('captcha-opacity'), x.prepend('<div class="captcha-loader"></div>')
                }

                function q(x) {
                    x.removeClass('captcha-opacity'), x.find('.captcha-loader').remove()
                }
                var r = a(this),
                    s = f,
                    t = 0,
                    u = !1,
                    v = !1,
                    w = 0;
                g(!1), r.on('click', '.captcha-modal__icons > .captcha-image', function (x) {
                    if (!(new Date - t <= d.captchaClickDelay) && (!d.captchaHoverDetection || u)) {
                        var y = x.pageX - a(x.target).offset().left,
                            z = x.pageY - a(x.target).offset().top;
                        if (y && z) {
                            var A = a(this),
                                B = r.find('.captcha-modal__icons');
                            B.hasClass('captcha-opacity') || (r.trigger('selected', [{
                                captcha_id: s
                            }]), !0 === d.enableLoadingAnimation ? (p(B), setTimeout(function () {
                                k(A)
                            }, d.loadingAnimationDelay)) : k(A))
                        }
                    }
                }).on({
                    mouseenter: function () {
                        u || (u = !0)
                    },
                    mouseleave: function () {
                        u && (u = !1)
                    }
                }, r)
            })
        }
    })
})(jQuery);